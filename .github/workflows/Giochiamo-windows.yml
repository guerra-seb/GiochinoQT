name: Windows Release (MSYS2 Qt6)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest

    env:
      APP_NAME: Giochiamo.exe   # se il target ha un altro nome, cambia qui

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Toolchain MinGW + Qt6 + ntldd (scanner dipendenze)
      - name: Setup MSYS2 with Qt6
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: MINGW64
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-qt6-base
            mingw-w64-x86_64-qt6-tools
            mingw-w64-x86_64-qt6-svg
            mingw-w64-x86_64-ntldd-git

      - name: Configure (CMake + Ninja)
        shell: msys2 {0}
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH="$MINGW_PREFIX"

      - name: Build
        shell: msys2 {0}
        run: cmake --build build --config Release

      - name: Install to staging dir
        shell: msys2 {0}
        run: cmake --install build --prefix build/install

      - name: Bundle Qt + copy ALL MSYS2 runtime DLLs
        shell: msys2 {0}
        run: |
          set -e
          exe="build/install/$APP_NAME"
          if [ ! -f "$exe" ]; then
            echo "Non trovo $exe"; ls -R build/install; exit 1
          fi

          # Trova il binario windeployqt (varia su MSYS2)
          WDEPLOY="$(command -v windeployqt || true)"
          [ -z "$WDEPLOY" ] && WDEPLOY="$(command -v windeployqt-qt6 || true)"
          [ -z "$WDEPLOY" ] && WDEPLOY="$(command -v windeployqt6 || true)"
          if [ -z "$WDEPLOY" ]; then
            echo "windeployqt* non trovato"; ls -1 /mingw64/bin | grep -i windeploy || true; exit 1
          fi
          echo "Using: $WDEPLOY"

          # 1) Qt DLL + plugin
          "$WDEPLOY" --release --compiler-runtime "$exe"

          # 2) Runtime MinGW base (per sicurezza)
          for f in libstdc++-6.dll libgcc_s_seh-1.dll libwinpthread-1.dll; do
            [ -f "/mingw64/bin/$f" ] && cp -n "/mingw64/bin/$f" build/install/ || true
          done

          # 3) Scan ricorsivo: copia OGNI dipendenza di tutti .exe/.dll presente in install
          list_deps() {
            ntldd -R "$1" \
              | tr '\\' '/' \
              | awk '{for (i=1;i<=NF;i++) if ($i ~ /mingw64\/bin\/[^ )]+\.dll/) {gsub(/[()]/,"",$i); print $i}}' \
              | sort -u
          }
          copy_dep() { f="$1"; [ -f "$f" ] && cp -n "$f" build/install/ || true; }

          find build/install -type f \( -name '*.exe' -o -name '*.dll' \) | while read -r bin; do
            for dep in $(list_deps "$bin"); do
              copy_dep "$dep"
            done
          done

          echo "Check finale (esistono ora harfbuzz/freetype/md4c?):"
          ls build/install | grep -Ei 'lib(harfbuzz-0|freetype-6|md4c)\.dll' || true

      - name: Zip portable folder
        shell: pwsh
        run: Compress-Archive -Path build\install\* -DestinationPath Giochiamo-windows.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Giochiamo-windows
          path: Giochiamo-windows.zip
