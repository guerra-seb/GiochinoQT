name: Windows Release (Qt via aqt, robust)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        qt:
          # Prova prima Qt recenti con MSVC 2022
          - { version: "6.7.2", arch: "win64_msvc2022_64", toolset: "" }
          - { version: "6.6.3", arch: "win64_msvc2022_64", toolset: "" }
          # Fallback: Qt 6.5 LTS richiede toolset 2019
          - { version: "6.5.3", arch: "win64_msvc2019_64", toolset: "v142" }

    env:
      APP_NAME: Giochiamo.exe

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install aqtinstall
        run: |
          python -m pip install --upgrade pip
          python -m pip install "aqtinstall==3.3.0"

      - name: List available arch for Qt ${{ matrix.qt.version }}
        shell: pwsh
        run: |
          python -m aqt list-qt windows desktop --arch $env:QTVER
        env:
          QTVER: ${{ matrix.qt.version }}

      - name: Download Qt ${{ matrix.qt.version }} / ${{ matrix.qt.arch }}
        shell: pwsh
        run: |
          $qtRoot = Join-Path $env:RUNNER_TEMP "Qt"
          python -m aqt install-qt windows desktop $env:QTVER $env:QTARCH -O $qtRoot
          echo "QT_DIR=$qtRoot\$env:QTVER\$env:QTARCH" | Out-File -FilePath $env:GITHUB_ENV -Append
        env:
          QTVER:  ${{ matrix.qt.version }}
          QTARCH: ${{ matrix.qt.arch }}

      - name: Show Qt tools
        shell: pwsh
        run: |
          Write-Host "QT_DIR=$env:QT_DIR"
          Get-ChildItem "$env:QT_DIR\bin" | Select-Object Name | Out-String | Write-Host

      - name: Configure (CMake VS2022 x64)
        run: >
          cmake -S . -B build -G "Visual Studio 17 2022" -A x64
          ${{ matrix.qt.toolset && format('-T {0}', matrix.qt.toolset) || '' }}
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_PREFIX_PATH="%QT_DIR%"

      - name: Build
        run: cmake --build build --config Release

      - name: Install to staging dir
        run: cmake --install build --config Release --prefix build/install

      - name: Verify exe exists
        shell: pwsh
        run: |
          $exe = Join-Path "build/install" $env:APP_NAME
          if (-not (Test-Path $exe)) {
            Write-Host "Contenuto build/install:"
            Get-ChildItem -Recurse build/install | ForEach-Object { $_.FullName }
            throw "Eseguibile non trovato in build/install. Controlla il nome del target o l'install() in CMake."
          }

      - name: Bundle Qt DLLs (windeployqt)
        shell: pwsh
        run: |
          $exe = Join-Path "build/install" $env:APP_NAME
          & "$env:QT_DIR\bin\windeployqt.exe" --release --compiler-runtime $exe

      - name: Zip portable folder
        run: powershell Compress-Archive -Path build\install\* -DestinationPath "Giochiamo-windows-${{ matrix.qt.version }}.zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Giochiamo-windows-${{ matrix.qt.version }}
          path: Giochiamo-windows-${{ matrix.qt.version }}.zip
